{"body":"What is it?\r\n-----------\r\n\r\n`names.js` augments the function prototype. Features include:\r\n\r\n* Named, unordered arguments\r\n* Default argument values\r\n\r\n[Skip to examples](#Usage)\r\n\r\n\r\nInstallation\r\n------------\r\n\r\nYou only need `names.js` (or the minified version, `names.min.js`) so you can do one of the following:\r\n\r\n* Clone the entire repo as a submodule of your project\r\n\r\n```\r\ngit submodule add https://github.com/markstickley/names.js.git path/to/clone/to\r\n```\r\n    \r\n* Go to the [project page](https://github.com/markstickley/names.js) and click on `names.js` or `names.min.js` and download to include anywhere in your project\r\n\r\n* Or you could click one of the handy links at the top of the page to download the whole lot\r\n\r\n\r\nLoading\r\n-------\r\n\r\n`names.js` can be loaded with [requirejs](http://www.requirejs.org) but if you are not using that you can just include it in a script tag.\r\n\r\n\r\n## Usage [Usage]\r\n\r\nUse `names.js` by calling `Function.prototype.applyNamed` on any function. It works just like `Function.prototype.apply` ([docs](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/apply)) except you pass an object as the second value instead of an array. \r\n\r\n### Basic usage\r\n\r\n```\r\nfunction anyOldFunction(arg1, arg2, arg3) {\r\n    return [arg1, arg2, arg3];\r\n}\r\n\r\nanyOldFunction.applyNamed(scope, {\r\n    arg2: 'foo',\r\n    arg1: 'bar',\r\n    arg3: 'baz'\r\n}); // ['bar', 'foo', 'baz']\r\n```\r\n\r\n\r\n### Omitting an argument sets it to `null`\r\n\r\n```\r\nfunction anyOldFunction(arg1, arg2, arg3) {\r\n    return [arg1, arg2, arg3];\r\n}\r\n\r\nanyOldFunction.applyNamed(scope, {\r\n    arg3: 'baz',\r\n    arg2: 'foo'\r\n}); // [null, 'foo', 'baz']\r\n```\r\n\r\n\r\n### Adding default values to arguments\r\n\r\n```\r\nfunction anyOldFunction(arg1, arg2, arg3) {\r\n    return [arg1, arg2, arg3];\r\n}\r\nanyOldFunction.__namesArgs = {\r\n    defaults: {\r\n        arg1: 'default value'\r\n    }\r\n};\r\n\r\nanyOldFunction.applyNamed(scope, {\r\n    arg3: 'baz',\r\n    arg2: 'foo'\r\n}); // ['default value', 'foo', 'baz']\r\n```\r\n\r\n\r\n### Specifying the argument order\r\n\r\nYou normally won't need to bother with this as `names.js` calculates it for you.\r\n\r\n```\r\nfunction anyOldFunction(arg1, arg2, arg3) {\r\n    ...\r\n}\r\nanyOldFunction.applyNamed(scope, {});\r\n\r\n// When running anyOldFunction.applyNamed for the first time it generates this:\r\n\r\nanyOldFunction.__namesArgs.args; // ['arg1', 'arg2', 'arg3']\r\n```\r\n\r\nHowever, if you want to change the order or save on cycles by specifying the arguments you can as follows:\r\n\r\n```\r\nfunction anyOldFunction(arg1, arg2, arg3) {\r\n    return [arg1, arg2, arg3];\r\n}\r\nanyOldFunction.__namesArgs = {\r\n    args: ['arg2', 'arg1', 'arg3']\r\n};\r\n\r\nanyOldFunction.applyNamed(scope, {\r\n    arg1: 'foo',\r\n    arg2: 'bar',\r\n    arg3: 'baz'\r\n}); // ['bar', 'foo', 'baz']\r\n```","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Names.js","tagline":"Bringing flexibility and clarity to JavaScript function calls.","google":""}
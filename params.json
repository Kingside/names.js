{"tagline":"Bringing flexibility and clarity to JavaScript function calls.","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Names.js","body":"[Skip to examples](#Usage)\r\n\r\nWhat is it?\r\n-----------\r\n\r\n`names.js` augments the function prototype. Features include:\r\n\r\n* Named, unordered arguments\r\n* Default argument values\r\n\r\n\r\nWhat problems does it solve?\r\n----------------------------\r\n\r\nWhen you call a function, you provide a list of arguments whose purpose is opaque without going to the function definition and reading the argument names. Going with the adage that code is read far more frequently than it is written, it makes sense that it should be clear what role arguments to a function have without having to jump to the function itself. `names.js` solves that problem.\r\n\r\nWhich is clearer to understand?\r\n\r\n```\r\nnode.clone(true);\r\n```\r\n\r\nor\r\n\r\n```\r\nnode.clone.applyNamed(node, { deep: true });\r\n```\r\n\r\nThis call to `swfobject` would be an ideal candidate for `names.js`!\r\n\r\n```\r\nswfobject.embedSWF(\"myContent.swf\", \"myContent\", \"300\", \"120\", \"9.0.0\",\"expressInstall.swf\", { foo: 'bar' }, { hello: 'world' }, { wmode: 'transparent' });\r\n```\r\n\r\nIn addition to this, `names.js` supports *default values* for arguments, so you don't have to specify them each time for the common usage.\r\n\r\n\r\nInstallation\r\n------------\r\n\r\nYou only need `names.js` (or the minified version, `names.min.js`) so you can do one of the following:\r\n\r\n* Clone the entire repo as a submodule of your project\r\n\r\n```\r\ngit submodule add https://github.com/markstickley/names.js.git path/to/clone/to\r\n```\r\n    \r\n* Go to the [project page](https://github.com/markstickley/names.js) and click on `names.js` or `names.min.js` and download to include anywhere in your project\r\n\r\n* Or you could click one of the handy links at the top of the page to download the whole lot\r\n\r\n\r\nLoading\r\n-------\r\n\r\n`names.js` can be loaded with [requirejs](http://www.requirejs.org) but if you are not using that you can just include it in a script tag.\r\n\r\n\r\n\r\nUsage <a id=\"Usage\"></a>\r\n-----\r\n\r\nUse `names.js` by calling `Function.prototype.applyNamed` on any function. It works just like `Function.prototype.apply` ([docs](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/apply)) except you pass an object as the second value instead of an array. \r\n\r\n### Basic usage\r\n\r\n```\r\nfunction anyOldFunction(arg1, arg2, arg3) {\r\n    return [arg1, arg2, arg3];\r\n}\r\n\r\nanyOldFunction.applyNamed(scope, {\r\n    arg2: 'foo',\r\n    arg1: 'bar',\r\n    arg3: 'baz'\r\n}); // ['bar', 'foo', 'baz']\r\n```\r\n\r\n\r\n### Omitting an argument sets it to `null`\r\n\r\n```\r\nfunction anyOldFunction(arg1, arg2, arg3) {\r\n    return [arg1, arg2, arg3];\r\n}\r\n\r\nanyOldFunction.applyNamed(scope, {\r\n    arg3: 'baz',\r\n    arg2: 'foo'\r\n}); // [null, 'foo', 'baz']\r\n```\r\n\r\n\r\n### Adding default values to arguments\r\n\r\n```\r\nfunction anyOldFunction(arg1, arg2, arg3) {\r\n    return [arg1, arg2, arg3];\r\n}\r\nanyOldFunction.__namesArgs = {\r\n    defaults: {\r\n        arg1: 'default value'\r\n    }\r\n};\r\n\r\nanyOldFunction.applyNamed(scope, {\r\n    arg3: 'baz',\r\n    arg2: 'foo'\r\n}); // ['default value', 'foo', 'baz']\r\n```\r\n\r\n\r\n### Specifying the argument order\r\n\r\n**IMPORTANT**: If your code is minified, you MUST specify the arguments because the argument names will change during minification.\r\n\r\nIf you are not minifying your code, `names.js` can calculate this for you as follows:\r\n\r\n```\r\nfunction anyOldFunction(arg1, arg2, arg3) {\r\n    ...\r\n}\r\nanyOldFunction.applyNamed(scope, {});\r\n\r\n// When running anyOldFunction.applyNamed for the first time it generates this:\r\n\r\nanyOldFunction.__namesArgs.args; // ['arg1', 'arg2', 'arg3']\r\n```\r\n\r\nIf you are minifying your code, want to change the order, change the argument names or save on cycles by specifying the arguments you can do so as follows:\r\n\r\n```\r\nfunction anyOldFunction(arg1, arg2, arg3) {\r\n    return [arg1, arg2, arg3];\r\n}\r\nanyOldFunction.__namesArgs = {\r\n    args: ['bish', 'bash', 'bosh']\r\n};\r\n\r\nanyOldFunction.applyNamed(scope, {\r\n    bash: 'foo',\r\n    bish: 'bar',\r\n    bosh: 'baz'\r\n}); // ['bar', 'foo', 'baz']\r\n```","google":"UA-17516604-2"}